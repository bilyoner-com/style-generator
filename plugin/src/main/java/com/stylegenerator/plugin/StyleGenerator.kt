package com.stylegenerator.plugin

import com.stylegenerator.plugin.util.FileUtil
import com.stylegenerator.plugin.util.StringUtil
import com.stylegenerator.plugin.util.XMLUtil
import org.w3c.dom.Document
import org.w3c.dom.Element
import java.util.Arrays
import javax.xml.transform.TransformerException

/**
 * Class to create style file.
 */
internal class StyleGenerator(private val projectPath: String,
                              private val fontNames: List<String> = emptyList(),
                              private val colorNames: List<String> = emptyList(),
                              private val parentStyle: String,
                              private val minTextSize: Int,
                              private val maxTextSize: Int) {

    private lateinit var doc: Document
    private lateinit var elementRoot: Element

    /**
     * Method to generate style definitions based on given fonts, colors and text sizes.
     */
    @Throws(Exception::class)
    fun generateResources() {
        // Remove old generated file
        val file = FileUtil.getFile(projectPath, OUTPUT_DIR, STYLE_FILE_NAME)
        file.delete()

        doc = XMLUtil.newDocument()

        elementRoot = doc.createElement(TAG_RESOURCE)
        doc.appendChild(elementRoot)

        elementRoot.appendChild(doc.createComment("Generated by Style Generator"))
        addLineBreak()

        // Parent style
        val elementParent = doc.createElement(TAG_STYLE)
        elementParent.setAttribute("name", STYLE_NAME_PREFIX)
        elementParent.setAttribute("parent", parentStyle)
        elementRoot.appendChild(elementParent)

        addLineBreak()

        for (fontName in fontNames) {
            // Add comment
            elementRoot.appendChild(doc.createComment(StringUtil.convertCamelCase(fontName) + " Styles"))
            elementRoot.appendChild(doc.createTextNode("\n    "))

            createStyle(fontName)
            addLineBreak()

            for (colorName in colorNames) {
                createStyle(fontName, colorName)
                addLineBreak()

                for (textSize in minTextSize..maxTextSize) {
                    createStyle(fontName, colorName, textSize)
                    addLineBreak()
                }
            }
        }

        createFile(doc)
    }

    private fun addLineBreak() {
        elementRoot.appendChild(doc.createTextNode("\n\n    "))
    }

    private fun createStyle(fontName: String) {
        addStyleElement(
                ItemTagType.FONT,
                fontName,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName)
        )
    }

    private fun createStyle(fontName: String, colorName: String) {
        addStyleElement(
                ItemTagType.COLOR,
                colorName,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName),
                StringUtil.convertCamelCase(colorName)
        )
    }

    private fun createStyle(fontName: String, colorName: String, textSize: Int) {
        addStyleElement(
                ItemTagType.SIZE,
                textSize,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName),
                StringUtil.convertCamelCase(colorName),
                textSize.toString()
        )
    }

    private fun addStyleElement(itemTagType: ItemTagType, value: Any, vararg styleNameParams: String) {
        val elementStyle = doc.createElement(TAG_STYLE)
        elementStyle.setAttribute("name",
                Arrays.asList(*styleNameParams).joinToString("."))
        elementRoot.appendChild(elementStyle)

        addItemElement(elementStyle, itemTagType, value)
    }

    private fun addItemElement(elementStyle: Element, itemTagType: ItemTagType, value: Any) {
        var name = ""
        var prefix = ""
        var suffix = ""
        when (itemTagType) {
            StyleGenerator.ItemTagType.FONT -> {
                name = "android:fontFamily"
                prefix = "@font/"
            }
            StyleGenerator.ItemTagType.COLOR -> {
                name = "android:textColor"
                prefix = "@color/"
            }
            StyleGenerator.ItemTagType.SIZE -> {
                name = "android:textSize"
                suffix = "sp"
            }
        }

        val elementItem = doc.createElement(TAG_ITEM)
        elementItem.setAttribute("name", name)
        elementItem.appendChild(doc.createTextNode(prefix + value + suffix))
        elementStyle.appendChild(elementItem)
    }

    /**
     * Method to create xml file.
     */
    @Throws(TransformerException::class)
    private fun createFile(doc: Document) {

        val file = FileUtil.getFile(projectPath, OUTPUT_DIR, STYLE_FILE_NAME)

        XMLUtil.writeToFile(doc, file)
    }

    private enum class ItemTagType {
        FONT,
        COLOR,
        SIZE
    }

    companion object {
        private const val OUTPUT_DIR = "src/main/res/values"

        private const val STYLE_FILE_NAME = "styles_text_appearance.xml"

        private const val STYLE_NAME_PREFIX = "TextStyle"

        private const val TAG_RESOURCE = "resources"
        private const val TAG_STYLE = "style"
        private const val TAG_ITEM = "item"
    }
}
