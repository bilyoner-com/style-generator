package com.stylegenerator.plugin;

import com.stylegenerator.plugin.util.StringUtil;
import com.stylegenerator.plugin.util.XMLUtil;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.File;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javax.xml.transform.TransformerException;

/**
 * Class to create style file.
 */
class StyleGenerator {
    private static final String STYLE_FILE_NAME = "styles_text_appearance.xml";

    private static final String STYLE_NAME_PREFIX = "TextStyle";

    private static final String TAG_RESOURCE = "resources";
    private static final String TAG_STYLE = "style";
    private static final String TAG_ITEM = "item";

    private final File outputDir;

    private final List<String> fontNames;

    private final List<String> colorNames;

    private final String parentStyle;

    private final int minTextSize;
    private final int maxTextSize;

    private Document doc;
    private Element elementRoot;

    /**
     * Constructor.
     *
     * @param outputDir   output directory where style file are generated
     * @param fontNames   font names added into font folder
     * @param colorNames  color names applied to text
     * @param parentStyle parent style name
     * @param minTextSize min value of the string size
     * @param maxTextSize max value of the string size
     */
    StyleGenerator(File outputDir,
                   List<String> fontNames,
                   List<String> colorNames,
                   String parentStyle,
                   int minTextSize,
                   int maxTextSize) {
        this.outputDir = outputDir;
        this.parentStyle = parentStyle;
        this.fontNames = fontNames != null ? fontNames : Collections.emptyList();
        this.colorNames = colorNames != null ? colorNames : Collections.emptyList();
        this.minTextSize = minTextSize;
        this.maxTextSize = maxTextSize;
    }

    /**
     * Method to generate style definitions based on given fonts, colors and text sizes.
     */
    void generateResources() throws Exception {
        doc = XMLUtil.newDocument();

        elementRoot = doc.createElement(TAG_RESOURCE);
        doc.appendChild(elementRoot);

        elementRoot.appendChild(doc.createComment("Generated by Style Generator"));

        addLineBreak();

        // Parent style
        Element elementParent = doc.createElement(TAG_STYLE);
        elementParent.setAttribute("name", STYLE_NAME_PREFIX);
        elementParent.setAttribute("parent", parentStyle);
        elementRoot.appendChild(elementParent);

        addLineBreak();

        for (String fontName : fontNames) {
            // Add comment
            elementRoot.appendChild(doc.createComment(StringUtil.convertCamelCase(fontName) + " Styles"));
            elementRoot.appendChild(doc.createTextNode("\n    "));

            createStyle(fontName);
            addLineBreak();

            for (String colorName : colorNames) {
                createStyle(fontName, colorName);
                addLineBreak();

                for (int textSize = minTextSize; textSize <= maxTextSize; textSize++) {
                    createStyle(fontName, colorName, textSize);
                    addLineBreak();
                }
            }
        }

        createFile(doc);
    }

    private void addLineBreak() {
        elementRoot.appendChild(doc.createTextNode("\n\n    "));
    }

    private void createStyle(String fontName) {
        addStyleElement(
                ItemTagType.FONT,
                fontName,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName)
        );
    }

    private void createStyle(String fontName, String colorName) {
        addStyleElement(
                ItemTagType.COLOR,
                colorName,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName),
                StringUtil.convertCamelCase(colorName)
        );
    }

    private void createStyle(String fontName, String colorName, int textSize) {
        addStyleElement(
                ItemTagType.SIZE,
                textSize,
                STYLE_NAME_PREFIX,
                StringUtil.convertCamelCase(fontName),
                StringUtil.convertCamelCase(colorName),
                String.valueOf(textSize)
        );
    }

    private void addStyleElement(ItemTagType itemTagType, Object value, String... styleNameParams) {
        Element elementStyle = doc.createElement(TAG_STYLE);
        elementStyle.setAttribute("name",
                String.join(".", Arrays.asList(styleNameParams)));
        elementRoot.appendChild(elementStyle);

        addItemElement(elementStyle, itemTagType, value);
    }

    private void addItemElement(Element elementStyle, ItemTagType itemTagType, Object value) {
        String name = "";
        String prefix = "";
        String suffix = "";
        switch (itemTagType) {
            case FONT:
                name = "android:fontFamily";
                prefix = "@font/";
                break;
            case COLOR:
                name = "android:textColor";
                prefix = "@color/";
                break;
            case SIZE:
                name = "android:textSize";
                suffix = "sp";
                break;
        }

        Element elementItem = doc.createElement(TAG_ITEM);
        elementItem.setAttribute("name", name);
        elementItem.appendChild(doc.createTextNode(prefix + value + suffix));
        elementStyle.appendChild(elementItem);
    }

    /**
     * Method to create xml file.
     */
    private void createFile(Document doc) throws TransformerException {

        final String fileName = outputDir.getPath() + File.separator + STYLE_FILE_NAME;

        XMLUtil.writeToFile(doc, new File(fileName));
    }

    private enum ItemTagType {
        FONT,
        COLOR,
        SIZE
    }
}
